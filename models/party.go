// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"github.com/vattle/sqlboiler/types"
	"gopkg.in/nullbio/null.v6"
)

// Party is an object representing the database table.
type Party struct {
	ID           int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Location     types.JSON `boil:"location" json:"location" toml:"location" yaml:"location"`
	RoomCode     string     `boil:"room_code" json:"room_code" toml:"room_code" yaml:"room_code"`
	Ended        bool       `boil:"ended" json:"ended" toml:"ended" yaml:"ended"`
	CurrentTrack null.JSON  `boil:"current_track" json:"current_track,omitempty" toml:"current_track" yaml:"current_track,omitempty"`
	QueueID      int        `boil:"queue_id" json:"queue_id" toml:"queue_id" yaml:"queue_id"`
	HistoryID    int        `boil:"history_id" json:"history_id" toml:"history_id" yaml:"history_id"`
	GuestsID     int        `boil:"guests_id" json:"guests_id" toml:"guests_id" yaml:"guests_id"`

	R *partyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L partyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// partyR is where relationships are stored.
type partyR struct {
	Queue   *TrackList
	History *TrackList
	Guest   *GuestList
	User    *User
}

// partyL is where Load methods for each relationship are stored.
type partyL struct{}

var (
	partyColumns               = []string{"id", "location", "room_code", "ended", "current_track", "queue_id", "history_id", "guests_id"}
	partyColumnsWithoutDefault = []string{"location", "room_code", "current_track", "queue_id", "history_id", "guests_id"}
	partyColumnsWithDefault    = []string{"id", "ended"}
	partyPrimaryKeyColumns     = []string{"id"}
)

type (
	// PartySlice is an alias for a slice of pointers to Party.
	// This should generally be used opposed to []Party.
	PartySlice []*Party

	partyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	partyType                 = reflect.TypeOf(&Party{})
	partyMapping              = queries.MakeStructMapping(partyType)
	partyPrimaryKeyMapping, _ = queries.BindMapping(partyType, partyMapping, partyPrimaryKeyColumns)
	partyInsertCacheMut       sync.RWMutex
	partyInsertCache          = make(map[string]insertCache)
	partyUpdateCacheMut       sync.RWMutex
	partyUpdateCache          = make(map[string]updateCache)
	partyUpsertCacheMut       sync.RWMutex
	partyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single party record from the query, and panics on error.
func (q partyQuery) OneP() *Party {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single party record from the query.
func (q partyQuery) One() (*Party, error) {
	o := &Party{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for party")
	}

	return o, nil
}

// AllP returns all Party records from the query, and panics on error.
func (q partyQuery) AllP() PartySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Party records from the query.
func (q partyQuery) All() (PartySlice, error) {
	var o []*Party

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Party slice")
	}

	return o, nil
}

// CountP returns the count of all Party records in the query, and panics on error.
func (q partyQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Party records in the query.
func (q partyQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count party rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q partyQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q partyQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if party exists")
	}

	return count > 0, nil
}

// QueueG pointed to by the foreign key.
func (o *Party) QueueG(mods ...qm.QueryMod) trackListQuery {
	return o.Queue(boil.GetDB(), mods...)
}

// Queue pointed to by the foreign key.
func (o *Party) Queue(exec boil.Executor, mods ...qm.QueryMod) trackListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.QueueID),
	}

	queryMods = append(queryMods, mods...)

	query := TrackLists(exec, queryMods...)
	queries.SetFrom(query.Query, "\"track_list\"")

	return query
}

// HistoryG pointed to by the foreign key.
func (o *Party) HistoryG(mods ...qm.QueryMod) trackListQuery {
	return o.History(boil.GetDB(), mods...)
}

// History pointed to by the foreign key.
func (o *Party) History(exec boil.Executor, mods ...qm.QueryMod) trackListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.HistoryID),
	}

	queryMods = append(queryMods, mods...)

	query := TrackLists(exec, queryMods...)
	queries.SetFrom(query.Query, "\"track_list\"")

	return query
}

// GuestG pointed to by the foreign key.
func (o *Party) GuestG(mods ...qm.QueryMod) guestListQuery {
	return o.Guest(boil.GetDB(), mods...)
}

// Guest pointed to by the foreign key.
func (o *Party) Guest(exec boil.Executor, mods ...qm.QueryMod) guestListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GuestsID),
	}

	queryMods = append(queryMods, mods...)

	query := GuestLists(exec, queryMods...)
	queries.SetFrom(query.Query, "\"guest_list\"")

	return query
}

// UserG pointed to by the foreign key.
func (o *Party) UserG(mods ...qm.QueryMod) userQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *Party) User(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	return query
} // LoadQueue allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadQueue(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*[]*Party)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.QueueID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.QueueID
		}
	}

	query := fmt.Sprintf(
		"select * from \"track_list\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrackList")
	}
	defer results.Close()

	var resultSlice []*TrackList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrackList")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Queue = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QueueID == foreign.ID {
				local.R.Queue = foreign
				break
			}
		}
	}

	return nil
}

// LoadHistory allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadHistory(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*[]*Party)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.HistoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.HistoryID
		}
	}

	query := fmt.Sprintf(
		"select * from \"track_list\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrackList")
	}
	defer results.Close()

	var resultSlice []*TrackList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrackList")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.History = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HistoryID == foreign.ID {
				local.R.History = foreign
				break
			}
		}
	}

	return nil
}

// LoadGuest allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadGuest(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*[]*Party)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.GuestsID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.GuestsID
		}
	}

	query := fmt.Sprintf(
		"select * from \"guest_list\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GuestList")
	}
	defer results.Close()

	var resultSlice []*GuestList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GuestList")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Guest = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuestsID == foreign.ID {
				local.R.Guest = foreign
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadUser(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*[]*Party)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user\" where \"party_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.PartyID.Int {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetQueueG of the party to the related item.
// Sets o.R.Queue to related.
// Adds o to related.R.QueueParties.
// Uses the global database handle.
func (o *Party) SetQueueG(insert bool, related *TrackList) error {
	return o.SetQueue(boil.GetDB(), insert, related)
}

// SetQueueP of the party to the related item.
// Sets o.R.Queue to related.
// Adds o to related.R.QueueParties.
// Panics on error.
func (o *Party) SetQueueP(exec boil.Executor, insert bool, related *TrackList) {
	if err := o.SetQueue(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetQueueGP of the party to the related item.
// Sets o.R.Queue to related.
// Adds o to related.R.QueueParties.
// Uses the global database handle and panics on error.
func (o *Party) SetQueueGP(insert bool, related *TrackList) {
	if err := o.SetQueue(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetQueue of the party to the related item.
// Sets o.R.Queue to related.
// Adds o to related.R.QueueParties.
func (o *Party) SetQueue(exec boil.Executor, insert bool, related *TrackList) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"party\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"queue_id"}),
		strmangle.WhereClause("\"", "\"", 2, partyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QueueID = related.ID

	if o.R == nil {
		o.R = &partyR{
			Queue: related,
		}
	} else {
		o.R.Queue = related
	}

	if related.R == nil {
		related.R = &trackListR{
			QueueParties: PartySlice{o},
		}
	} else {
		related.R.QueueParties = append(related.R.QueueParties, o)
	}

	return nil
}

// SetHistoryG of the party to the related item.
// Sets o.R.History to related.
// Adds o to related.R.HistoryParties.
// Uses the global database handle.
func (o *Party) SetHistoryG(insert bool, related *TrackList) error {
	return o.SetHistory(boil.GetDB(), insert, related)
}

// SetHistoryP of the party to the related item.
// Sets o.R.History to related.
// Adds o to related.R.HistoryParties.
// Panics on error.
func (o *Party) SetHistoryP(exec boil.Executor, insert bool, related *TrackList) {
	if err := o.SetHistory(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetHistoryGP of the party to the related item.
// Sets o.R.History to related.
// Adds o to related.R.HistoryParties.
// Uses the global database handle and panics on error.
func (o *Party) SetHistoryGP(insert bool, related *TrackList) {
	if err := o.SetHistory(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetHistory of the party to the related item.
// Sets o.R.History to related.
// Adds o to related.R.HistoryParties.
func (o *Party) SetHistory(exec boil.Executor, insert bool, related *TrackList) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"party\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"history_id"}),
		strmangle.WhereClause("\"", "\"", 2, partyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HistoryID = related.ID

	if o.R == nil {
		o.R = &partyR{
			History: related,
		}
	} else {
		o.R.History = related
	}

	if related.R == nil {
		related.R = &trackListR{
			HistoryParties: PartySlice{o},
		}
	} else {
		related.R.HistoryParties = append(related.R.HistoryParties, o)
	}

	return nil
}

// SetGuestG of the party to the related item.
// Sets o.R.Guest to related.
// Adds o to related.R.GuestParties.
// Uses the global database handle.
func (o *Party) SetGuestG(insert bool, related *GuestList) error {
	return o.SetGuest(boil.GetDB(), insert, related)
}

// SetGuestP of the party to the related item.
// Sets o.R.Guest to related.
// Adds o to related.R.GuestParties.
// Panics on error.
func (o *Party) SetGuestP(exec boil.Executor, insert bool, related *GuestList) {
	if err := o.SetGuest(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGuestGP of the party to the related item.
// Sets o.R.Guest to related.
// Adds o to related.R.GuestParties.
// Uses the global database handle and panics on error.
func (o *Party) SetGuestGP(insert bool, related *GuestList) {
	if err := o.SetGuest(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGuest of the party to the related item.
// Sets o.R.Guest to related.
// Adds o to related.R.GuestParties.
func (o *Party) SetGuest(exec boil.Executor, insert bool, related *GuestList) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"party\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"guests_id"}),
		strmangle.WhereClause("\"", "\"", 2, partyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuestsID = related.ID

	if o.R == nil {
		o.R = &partyR{
			Guest: related,
		}
	} else {
		o.R.Guest = related
	}

	if related.R == nil {
		related.R = &guestListR{
			GuestParties: PartySlice{o},
		}
	} else {
		related.R.GuestParties = append(related.R.GuestParties, o)
	}

	return nil
}

// SetUserG of the party to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Party.
// Uses the global database handle.
func (o *Party) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the party to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Party.
// Panics on error.
func (o *Party) SetUserP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the party to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Party.
// Uses the global database handle and panics on error.
func (o *Party) SetUserGP(insert bool, related *User) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the party to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Party.
func (o *Party) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error

	if insert {
		related.PartyID.Int = o.ID
		related.PartyID.Valid = true

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"party_id"}),
			strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.PartyID.Int = o.ID
		related.PartyID.Valid = true
	}

	if o.R == nil {
		o.R = &partyR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Party: o,
		}
	} else {
		related.R.Party = o
	}
	return nil
}

// RemoveUserG relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Party) RemoveUserG(related *User) error {
	return o.RemoveUser(boil.GetDB(), related)
}

// RemoveUserP relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Party) RemoveUserP(exec boil.Executor, related *User) {
	if err := o.RemoveUser(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUserGP relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Party) RemoveUserGP(related *User) {
	if err := o.RemoveUser(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Party) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	related.PartyID.Valid = false
	if err = related.Update(exec, "party_id"); err != nil {
		related.PartyID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Party = nil
	return nil
}

// PartiesG retrieves all records.
func PartiesG(mods ...qm.QueryMod) partyQuery {
	return Parties(boil.GetDB(), mods...)
}

// Parties retrieves all the records using an executor.
func Parties(exec boil.Executor, mods ...qm.QueryMod) partyQuery {
	mods = append(mods, qm.From("\"party\""))
	return partyQuery{NewQuery(exec, mods...)}
}

// FindPartyG retrieves a single record by ID.
func FindPartyG(id int, selectCols ...string) (*Party, error) {
	return FindParty(boil.GetDB(), id, selectCols...)
}

// FindPartyGP retrieves a single record by ID, and panics on error.
func FindPartyGP(id int, selectCols ...string) *Party {
	retobj, err := FindParty(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindParty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindParty(exec boil.Executor, id int, selectCols ...string) (*Party, error) {
	partyObj := &Party{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"party\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(partyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from party")
	}

	return partyObj, nil
}

// FindPartyP retrieves a single record by ID with an executor, and panics on error.
func FindPartyP(exec boil.Executor, id int, selectCols ...string) *Party {
	retobj, err := FindParty(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Party) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Party) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Party) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Party) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no party provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(partyColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	partyInsertCacheMut.RLock()
	cache, cached := partyInsertCache[key]
	partyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			partyColumns,
			partyColumnsWithDefault,
			partyColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(partyType, partyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(partyType, partyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"party\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"party\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into party")
	}

	if !cached {
		partyInsertCacheMut.Lock()
		partyInsertCache[key] = cache
		partyInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Party record. See Update for
// whitelist behavior description.
func (o *Party) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Party record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Party) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Party, and panics on error.
// See Update for whitelist behavior description.
func (o *Party) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Party.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Party) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	partyUpdateCacheMut.RLock()
	cache, cached := partyUpdateCache[key]
	partyUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			partyColumns,
			partyPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update party, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"party\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, partyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(partyType, partyMapping, append(wl, partyPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update party row")
	}

	if !cached {
		partyUpdateCacheMut.Lock()
		partyUpdateCache[key] = cache
		partyUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q partyQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q partyQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for party")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PartySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PartySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PartySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PartySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"party\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, partyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in party slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Party) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Party) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Party) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Party) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no party provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(partyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	partyUpsertCacheMut.RLock()
	cache, cached := partyUpsertCache[key]
	partyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			partyColumns,
			partyColumnsWithDefault,
			partyColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			partyColumns,
			partyPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert party, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(partyPrimaryKeyColumns))
			copy(conflict, partyPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"party\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(partyType, partyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(partyType, partyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert party")
	}

	if !cached {
		partyUpsertCacheMut.Lock()
		partyUpsertCache[key] = cache
		partyUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Party record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Party) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Party record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Party) DeleteG() error {
	if o == nil {
		return errors.New("models: no Party provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Party record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Party) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Party record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Party) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Party provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), partyPrimaryKeyMapping)
	sql := "DELETE FROM \"party\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from party")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q partyQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q partyQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no partyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from party")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PartySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PartySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Party slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PartySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PartySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Party slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"party\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, partyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from party slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Party) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Party) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Party) ReloadG() error {
	if o == nil {
		return errors.New("models: no Party provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Party) Reload(exec boil.Executor) error {
	ret, err := FindParty(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PartySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PartySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PartySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PartySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PartySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	parties := PartySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"party\".* FROM \"party\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, partyPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&parties)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PartySlice")
	}

	*o = parties

	return nil
}

// PartyExists checks if the Party row exists.
func PartyExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"party\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if party exists")
	}

	return exists, nil
}

// PartyExistsG checks if the Party row exists.
func PartyExistsG(id int) (bool, error) {
	return PartyExists(boil.GetDB(), id)
}

// PartyExistsGP checks if the Party row exists. Panics on error.
func PartyExistsGP(id int) bool {
	e, err := PartyExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PartyExistsP checks if the Party row exists. Panics on error.
func PartyExistsP(exec boil.Executor, id int) bool {
	e, err := PartyExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
