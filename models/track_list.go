// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"github.com/vattle/sqlboiler/types"
)

// TrackList is an object representing the database table.
type TrackList struct {
	ID        int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Data      types.JSON `boil:"data" json:"data" toml:"data" yaml:"data"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *trackListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// trackListR is where relationships are stored.
type trackListR struct {
}

// trackListL is where Load methods for each relationship are stored.
type trackListL struct{}

var (
	trackListColumns               = []string{"id", "data", "created_at", "updated_at"}
	trackListColumnsWithoutDefault = []string{"data"}
	trackListColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	trackListPrimaryKeyColumns     = []string{"id"}
)

type (
	// TrackListSlice is an alias for a slice of pointers to TrackList.
	// This should generally be used opposed to []TrackList.
	TrackListSlice []*TrackList
	// TrackListHook is the signature for custom TrackList hook methods
	TrackListHook func(boil.Executor, *TrackList) error

	trackListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackListType                 = reflect.TypeOf(&TrackList{})
	trackListMapping              = queries.MakeStructMapping(trackListType)
	trackListPrimaryKeyMapping, _ = queries.BindMapping(trackListType, trackListMapping, trackListPrimaryKeyColumns)
	trackListInsertCacheMut       sync.RWMutex
	trackListInsertCache          = make(map[string]insertCache)
	trackListUpdateCacheMut       sync.RWMutex
	trackListUpdateCache          = make(map[string]updateCache)
	trackListUpsertCacheMut       sync.RWMutex
	trackListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var trackListBeforeInsertHooks []TrackListHook
var trackListBeforeUpdateHooks []TrackListHook
var trackListBeforeDeleteHooks []TrackListHook
var trackListBeforeUpsertHooks []TrackListHook

var trackListAfterInsertHooks []TrackListHook
var trackListAfterSelectHooks []TrackListHook
var trackListAfterUpdateHooks []TrackListHook
var trackListAfterDeleteHooks []TrackListHook
var trackListAfterUpsertHooks []TrackListHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrackList) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrackList) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrackList) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrackList) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrackList) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrackList) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrackList) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrackList) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrackList) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trackListAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackListHook registers your hook function for all future operations.
func AddTrackListHook(hookPoint boil.HookPoint, trackListHook TrackListHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		trackListBeforeInsertHooks = append(trackListBeforeInsertHooks, trackListHook)
	case boil.BeforeUpdateHook:
		trackListBeforeUpdateHooks = append(trackListBeforeUpdateHooks, trackListHook)
	case boil.BeforeDeleteHook:
		trackListBeforeDeleteHooks = append(trackListBeforeDeleteHooks, trackListHook)
	case boil.BeforeUpsertHook:
		trackListBeforeUpsertHooks = append(trackListBeforeUpsertHooks, trackListHook)
	case boil.AfterInsertHook:
		trackListAfterInsertHooks = append(trackListAfterInsertHooks, trackListHook)
	case boil.AfterSelectHook:
		trackListAfterSelectHooks = append(trackListAfterSelectHooks, trackListHook)
	case boil.AfterUpdateHook:
		trackListAfterUpdateHooks = append(trackListAfterUpdateHooks, trackListHook)
	case boil.AfterDeleteHook:
		trackListAfterDeleteHooks = append(trackListAfterDeleteHooks, trackListHook)
	case boil.AfterUpsertHook:
		trackListAfterUpsertHooks = append(trackListAfterUpsertHooks, trackListHook)
	}
}

// OneP returns a single trackList record from the query, and panics on error.
func (q trackListQuery) OneP() *TrackList {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single trackList record from the query.
func (q trackListQuery) One() (*TrackList, error) {
	o := &TrackList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for track_list")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all TrackList records from the query, and panics on error.
func (q trackListQuery) AllP() TrackListSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TrackList records from the query.
func (q trackListQuery) All() (TrackListSlice, error) {
	var o TrackListSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TrackList slice")
	}

	if len(trackListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all TrackList records in the query, and panics on error.
func (q trackListQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TrackList records in the query.
func (q trackListQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count track_list rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q trackListQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q trackListQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if track_list exists")
	}

	return count > 0, nil
}

// TrackListsG retrieves all records.
func TrackListsG(mods ...qm.QueryMod) trackListQuery {
	return TrackLists(boil.GetDB(), mods...)
}

// TrackLists retrieves all the records using an executor.
func TrackLists(exec boil.Executor, mods ...qm.QueryMod) trackListQuery {
	mods = append(mods, qm.From("\"track_list\""))
	return trackListQuery{NewQuery(exec, mods...)}
}

// FindTrackListG retrieves a single record by ID.
func FindTrackListG(id int, selectCols ...string) (*TrackList, error) {
	return FindTrackList(boil.GetDB(), id, selectCols...)
}

// FindTrackListGP retrieves a single record by ID, and panics on error.
func FindTrackListGP(id int, selectCols ...string) *TrackList {
	retobj, err := FindTrackList(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTrackList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrackList(exec boil.Executor, id int, selectCols ...string) (*TrackList, error) {
	trackListObj := &TrackList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"track_list\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(trackListObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from track_list")
	}

	return trackListObj, nil
}

// FindTrackListP retrieves a single record by ID with an executor, and panics on error.
func FindTrackListP(exec boil.Executor, id int, selectCols ...string) *TrackList {
	retobj, err := FindTrackList(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TrackList) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TrackList) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TrackList) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *TrackList) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no track_list provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackListColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	trackListInsertCacheMut.RLock()
	cache, cached := trackListInsertCache[key]
	trackListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			trackListColumns,
			trackListColumnsWithDefault,
			trackListColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(trackListType, trackListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackListType, trackListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"track_list\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"track_list\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into track_list")
	}

	if !cached {
		trackListInsertCacheMut.Lock()
		trackListInsertCache[key] = cache
		trackListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single TrackList record. See Update for
// whitelist behavior description.
func (o *TrackList) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single TrackList record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *TrackList) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the TrackList, and panics on error.
// See Update for whitelist behavior description.
func (o *TrackList) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the TrackList.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *TrackList) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	trackListUpdateCacheMut.RLock()
	cache, cached := trackListUpdateCache[key]
	trackListUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(trackListColumns, trackListPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update track_list, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"track_list\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackListType, trackListMapping, append(wl, trackListPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update track_list row")
	}

	if !cached {
		trackListUpdateCacheMut.Lock()
		trackListUpdateCache[key] = cache
		trackListUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q trackListQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q trackListQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for track_list")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TrackListSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TrackListSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TrackListSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackListSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"track_list\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(trackListPrimaryKeyColumns), len(colNames)+1, len(trackListPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in trackList slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TrackList) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TrackList) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TrackList) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TrackList) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no track_list provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackListColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackListUpsertCacheMut.RLock()
	cache, cached := trackListUpsertCache[key]
	trackListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			trackListColumns,
			trackListColumnsWithDefault,
			trackListColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			trackListColumns,
			trackListPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert track_list, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trackListPrimaryKeyColumns))
			copy(conflict, trackListPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"track_list\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(trackListType, trackListMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackListType, trackListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert track_list")
	}

	if !cached {
		trackListUpsertCacheMut.Lock()
		trackListUpsertCache[key] = cache
		trackListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single TrackList record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TrackList) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single TrackList record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TrackList) DeleteG() error {
	if o == nil {
		return errors.New("models: no TrackList provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single TrackList record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TrackList) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single TrackList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrackList) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no TrackList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackListPrimaryKeyMapping)
	sql := "DELETE FROM \"track_list\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from track_list")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q trackListQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q trackListQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no trackListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from track_list")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TrackListSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TrackListSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no TrackList slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TrackListSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackListSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no TrackList slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(trackListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"track_list\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, trackListPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(trackListPrimaryKeyColumns), 1, len(trackListPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from trackList slice")
	}

	if len(trackListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TrackList) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TrackList) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TrackList) ReloadG() error {
	if o == nil {
		return errors.New("models: no TrackList provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrackList) Reload(exec boil.Executor) error {
	ret, err := FindTrackList(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TrackListSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TrackListSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackListSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TrackListSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackListSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	trackLists := TrackListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"track_list\".* FROM \"track_list\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, trackListPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(trackListPrimaryKeyColumns), 1, len(trackListPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&trackLists)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackListSlice")
	}

	*o = trackLists

	return nil
}

// TrackListExists checks if the TrackList row exists.
func TrackListExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"track_list\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if track_list exists")
	}

	return exists, nil
}

// TrackListExistsG checks if the TrackList row exists.
func TrackListExistsG(id int) (bool, error) {
	return TrackListExists(boil.GetDB(), id)
}

// TrackListExistsGP checks if the TrackList row exists. Panics on error.
func TrackListExistsGP(id int) bool {
	e, err := TrackListExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TrackListExistsP checks if the TrackList row exists. Panics on error.
func TrackListExistsP(exec boil.Executor, id int) bool {
	e, err := TrackListExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
