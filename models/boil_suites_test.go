// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Users", testUsers)
	t.Run("TrackLists", testTrackLists)
	t.Run("Guests", testGuests)
}

func TestDelete(t *testing.T) {
	t.Run("Users", testUsersDelete)
	t.Run("TrackLists", testTrackListsDelete)
	t.Run("Guests", testGuestsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("TrackLists", testTrackListsQueryDeleteAll)
	t.Run("Guests", testGuestsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("TrackLists", testTrackListsSliceDeleteAll)
	t.Run("Guests", testGuestsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Users", testUsersExists)
	t.Run("TrackLists", testTrackListsExists)
	t.Run("Guests", testGuestsExists)
}

func TestFind(t *testing.T) {
	t.Run("Users", testUsersFind)
	t.Run("TrackLists", testTrackListsFind)
	t.Run("Guests", testGuestsFind)
}

func TestBind(t *testing.T) {
	t.Run("Users", testUsersBind)
	t.Run("TrackLists", testTrackListsBind)
	t.Run("Guests", testGuestsBind)
}

func TestOne(t *testing.T) {
	t.Run("Users", testUsersOne)
	t.Run("TrackLists", testTrackListsOne)
	t.Run("Guests", testGuestsOne)
}

func TestAll(t *testing.T) {
	t.Run("Users", testUsersAll)
	t.Run("TrackLists", testTrackListsAll)
	t.Run("Guests", testGuestsAll)
}

func TestCount(t *testing.T) {
	t.Run("Users", testUsersCount)
	t.Run("TrackLists", testTrackListsCount)
	t.Run("Guests", testGuestsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Users", testUsersHooks)
	t.Run("TrackLists", testTrackListsHooks)
	t.Run("Guests", testGuestsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("TrackLists", testTrackListsInsert)
	t.Run("TrackLists", testTrackListsInsertWhitelist)
	t.Run("Guests", testGuestsInsert)
	t.Run("Guests", testGuestsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Users", testUsersReload)
	t.Run("TrackLists", testTrackListsReload)
	t.Run("Guests", testGuestsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Users", testUsersReloadAll)
	t.Run("TrackLists", testTrackListsReloadAll)
	t.Run("Guests", testGuestsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Users", testUsersSelect)
	t.Run("TrackLists", testTrackListsSelect)
	t.Run("Guests", testGuestsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Users", testUsersUpdate)
	t.Run("TrackLists", testTrackListsUpdate)
	t.Run("Guests", testGuestsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("TrackLists", testTrackListsSliceUpdateAll)
	t.Run("Guests", testGuestsSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Users", testUsersUpsert)
	t.Run("TrackLists", testTrackListsUpsert)
	t.Run("Guests", testGuestsUpsert)
}
