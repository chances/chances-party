// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testParties(t *testing.T) {
	t.Parallel()

	query := Parties(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPartiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = party.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Parties(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PartySlice{party}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPartiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PartyExists(tx, party.ID)
	if err != nil {
		t.Errorf("Unable to check if Party exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PartyExistsG to return true, but got false.")
	}
}
func testPartiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	partyFound, err := FindParty(tx, party.ID)
	if err != nil {
		t.Error(err)
	}

	if partyFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPartiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Parties(tx).Bind(party); err != nil {
		t.Error(err)
	}
}

func testPartiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Parties(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPartiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	partyOne := &Party{}
	partyTwo := &Party{}
	if err = randomize.Struct(seed, partyOne, partyDBTypes, false, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err = randomize.Struct(seed, partyTwo, partyDBTypes, false, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = partyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = partyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Parties(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPartiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	partyOne := &Party{}
	partyTwo := &Party{}
	if err = randomize.Struct(seed, partyOne, partyDBTypes, false, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err = randomize.Struct(seed, partyTwo, partyDBTypes, false, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = partyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = partyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPartiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPartiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx, partyColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPartyToOneTrackListUsingQueue(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Party
	var foreign TrackList

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, trackListDBTypes, true, trackListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackList struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.QueueID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Queue(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PartySlice{&local}
	if err = local.L.LoadQueue(tx, false, (*[]*Party)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Queue == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Queue = nil
	if err = local.L.LoadQueue(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Queue == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPartyToOneTrackListUsingHistory(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Party
	var foreign TrackList

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, trackListDBTypes, true, trackListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackList struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.HistoryID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.History(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PartySlice{&local}
	if err = local.L.LoadHistory(tx, false, (*[]*Party)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.History == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.History = nil
	if err = local.L.LoadHistory(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.History == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPartyToOneGuestListUsingGuest(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Party
	var foreign GuestList

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, guestListDBTypes, true, guestListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuestList struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.GuestsID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Guest(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PartySlice{&local}
	if err = local.L.LoadGuest(tx, false, (*[]*Party)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Guest == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Guest = nil
	if err = local.L.LoadGuest(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Guest == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPartyToOneSetOpTrackListUsingQueue(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c TrackList

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, trackListDBTypes, false, strmangle.SetComplement(trackListPrimaryKeyColumns, trackListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trackListDBTypes, false, strmangle.SetComplement(trackListPrimaryKeyColumns, trackListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TrackList{&b, &c} {
		err = a.SetQueue(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Queue != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.QueueParties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.QueueID != x.ID {
			t.Error("foreign key was wrong value", a.QueueID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.QueueID))
		reflect.Indirect(reflect.ValueOf(&a.QueueID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.QueueID != x.ID {
			t.Error("foreign key was wrong value", a.QueueID, x.ID)
		}
	}
}
func testPartyToOneSetOpTrackListUsingHistory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c TrackList

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, trackListDBTypes, false, strmangle.SetComplement(trackListPrimaryKeyColumns, trackListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trackListDBTypes, false, strmangle.SetComplement(trackListPrimaryKeyColumns, trackListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TrackList{&b, &c} {
		err = a.SetHistory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.History != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.HistoryParties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HistoryID != x.ID {
			t.Error("foreign key was wrong value", a.HistoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HistoryID))
		reflect.Indirect(reflect.ValueOf(&a.HistoryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HistoryID != x.ID {
			t.Error("foreign key was wrong value", a.HistoryID, x.ID)
		}
	}
}
func testPartyToOneSetOpGuestListUsingGuest(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c GuestList

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, guestListDBTypes, false, strmangle.SetComplement(guestListPrimaryKeyColumns, guestListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, guestListDBTypes, false, strmangle.SetComplement(guestListPrimaryKeyColumns, guestListColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GuestList{&b, &c} {
		err = a.SetGuest(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Guest != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GuestParties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GuestsID != x.ID {
			t.Error("foreign key was wrong value", a.GuestsID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GuestsID))
		reflect.Indirect(reflect.ValueOf(&a.GuestsID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GuestsID != x.ID {
			t.Error("foreign key was wrong value", a.GuestsID, x.ID)
		}
	}
}
func testPartiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = party.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPartiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PartySlice{party}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPartiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Parties(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	partyDBTypes = map[string]string{`CurrentTrack`: `json`, `Ended`: `boolean`, `GuestsID`: `integer`, `HistoryID`: `integer`, `ID`: `integer`, `Location`: `json`, `QueueID`: `integer`, `RoomCode`: `character varying`}
	_            = bytes.MinRead
)

func testPartiesUpdate(t *testing.T) {
	t.Parallel()

	if len(partyColumns) == len(partyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err = party.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPartiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(partyColumns) == len(partyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, party, partyDBTypes, true, partyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(partyColumns, partyPrimaryKeyColumns) {
		fields = partyColumns
	} else {
		fields = strmangle.SetComplement(
			partyColumns,
			partyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(party))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PartySlice{party}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPartiesUpsert(t *testing.T) {
	t.Parallel()

	if len(partyColumns) == len(partyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	party := Party{}
	if err = randomize.Struct(seed, &party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Party: %s", err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &party, partyDBTypes, false, partyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err = party.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Party: %s", err)
	}

	count, err = Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
